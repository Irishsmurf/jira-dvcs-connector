package com.atlassian.jira.plugins.dvcs.querydsl.v3;

import com.atlassian.pocketknife.api.querydsl.SchemaProvider;
import com.mysema.query.sql.ColumnMetadata;
import com.mysema.query.sql.RelationalPathBase;
import com.mysema.query.types.expr.SimpleExpression;
import com.mysema.query.types.path.NumberPath;
import com.mysema.query.types.path.StringPath;

import java.sql.Types;

import static com.mysema.query.types.PathMetadataFactory.forVariable;

/**
 *
 * Generated by https://bitbucket.org/atlassian/querydsl-ao-code-gen
 */
public class QRepositoryPullRequestIssueKeyMapping extends RelationalPathBase<QRepositoryPullRequestIssueKeyMapping>
    implements IssueKeyedMapping
{

    private static final long serialVersionUID = -1033048932L;

    public static final String AO_TABLE_NAME  = "AO_E8B6CC_PR_ISSUE_KEY";

    public static final QRepositoryPullRequestIssueKeyMapping withSchema(SchemaProvider schemaProvider)
    {
        String schema = schemaProvider.getSchema(AO_TABLE_NAME);
        return new QRepositoryPullRequestIssueKeyMapping("PR_ISSUE_KEY", schema, AO_TABLE_NAME);
    }

    /**
     * Database Columns
     */
    public final NumberPath<Integer> ID = createNumber("ID", Integer.class);

    public final StringPath ISSUE_KEY = createString("ISSUE_KEY");

    public final NumberPath<Integer> PULL_REQUEST_ID = createNumber("PULL_REQUEST_ID", Integer.class);


    public final com.mysema.query.sql.PrimaryKey<QRepositoryPullRequestIssueKeyMapping> PR_ISSUE_KEY_PK = createPrimaryKey(ID);

    public QRepositoryPullRequestIssueKeyMapping(String variable, String schema, String table) {
        super(QRepositoryPullRequestIssueKeyMapping.class, forVariable(variable), schema, table);
        addMetadata();
    }

    private void addMetadata() {
        /**
         * Database Metadata is not yet used by QueryDSL but it might one day.
         */
        addMetadata(ID, ColumnMetadata.named("ID").ofType(Types.INTEGER)); // .withSize(0).withNotNull()); // until detect primitive types, int ..
        addMetadata(ISSUE_KEY, ColumnMetadata.named("ISSUE_KEY").ofType(Types.VARCHAR)); // .withSize(0)); // until detect primitive types, int ..
        addMetadata(PULL_REQUEST_ID, ColumnMetadata.named("PULL_REQUEST_ID").ofType(Types.INTEGER)); // .withSize(0)); // until detect primitive types, int ..
    }

    @Override
    public SimpleExpression getIssueKeyExpression()
    {
        return ISSUE_KEY;
    }
}